# This is a basic workflow to help you get started with Actions

name: CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main","pipeline"]
  pull_request:
    branches: [ "main","pipeline"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a two jobs "build" and "lint"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
         
  lint:

      runs-on: ubuntu-latest

      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3

        # Combination of various linters, written in bash, to help your source code
        - name: Super-Linter
          uses: github/super-linter@v4.9.7
          # Give full access to the repo and run individual linter in check section for each pull request
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            # Disable the blocking functionality of this linter (CI won't fail even if there are errors) 
            # DISABLE_ERROS: true
            ##
            # Customize which destination output file should go to
            # OUTPUT_FOLDER: Reports (for example) 
            ##
            # Customize the output file 
            # OUTPUT_DETAILS: detailed
            ##
            # Restrict the files that linter run on  and the linter will only parse and lint the newly edited files
            # VALIDATE_ALL_CODEBASE: false
            # Disable linter running on specific type of files.
            # VALIDATE_{TYPE_OF_FILES}: false (i.e: VALIDATE_ARM: false) 
            ##
            # Use any specific custom file rules
            # {TYPE_OF_FILES}_CONFIG_FILE: {PATH_TO_THE_FILE}
            
  documentation:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

       # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
        
#         - name: Install
#           run: npm install -g jsdoc
          
        - name: JSDoc Action
          uses: andstor/jsdoc-action@v1.2.1
          with:
             source_dir: ./scheduler
             recurse: true
#             output_dir: ./out
#             ## config_file: conf.json
#             template: minami
#             front_page: README.md

  unit_test:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      
       # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
          
        # Unit tests on JavaScript Files (This action will automatically install everything needed)
        - name: Run Jest
          # You may pin to the exact commit or the version.
          # uses: stefanoeb/jest-action@f9bb23f509cde20ee9b494f0496d1d3323861cc4
          uses: stefanoeb/jest-action@1.0.4
          
  validate_html:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      
       # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
        
        # Validate html on html file
        - name: HTML5 Validator
          # You may pin to the exact commit or the version.
          # uses: Cyb3r-Jak3/html5validator-action@41633d488eb36e18fd1a95ffc83daf1bf22a75bd
          uses: Cyb3r-Jak3/html5validator-action@v7.2.0
          with:
             root: ./scheduler/
             css: ./scheduler/
